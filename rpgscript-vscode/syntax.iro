#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = rpgscript
file_extensions []     = rpgscript;

###########################or#####################################
## Constants
################################################################

__MY_CONSTANT \= (\b[a-z][a-z0-9]*)
__LOGICKEYWORD \= (\?)
__LOGIC \= (\b(isnot|gt|lt|is|all|one|as|once|eq|this|with))
__TRIGGERNAME \= (^#(.)+$)
__SCENENAME \= (^@(.)+$)
__INLINE \= (^\+(.)+$)
__DIALOG \= ((^[\w \w]*:)|(^(\s)+(\w)+:))
__TRIGGERTYPE \= (^(action|step|item),)

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.other : style {
   color                 = white
   ace_scope             = other
   textmate_scope        = other
   pygments_scope        = Keyword
}

.number : style {
   color                 = purple
   textmate_scope        = variable.other.constant
   ace_scope             = other
   pygments_scope        = Keyword
}

.punctuation : style {
   color                 = grey
   ace_scope             = punctuation
   textmate_scope        = punctuation.terminator.statement
   pygments_scope        = Punctuation
}

.text : style {
   color                 = brown
   ace_scope             = text
   textmate_scope        = string
   pygments_scope        = String
}

.control : style {
   color                 = red
   ace_scope             = control
   textmate_scope        = keyword.operator.assignment
   pygments_scope        = Keyword
}

.function : style {
   color                 = cyan
   ace_scope             = function
   textmate_scope        = storage.type.function
   pygments_scope        = Keyword
}

.scene : style {
   color                 = purple
   ace_scope             = constant
   textmate_scope        = constant
   pygments_scope        = Keyword
}

.dialog : style {
   color                 = green
   ace_scope             = storage
   textmate_scope        = entity.name.function
   pygments_scope        = Keyword
}

.parameter : style {
   color                 = orange
   ace_scope             = parameter
   textmate_scope        = variable.parameter
   pygments_scope        = Keyword
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   : pattern {
      regex          \= (@this)
      styles []       = .control;
   }

   : pattern {
      regex          \= $${__SCENENAME}
      styles []       = .scene;
   }
   
   : pattern {
      regex          \= $${__TRIGGERNAME}
      styles []       = .dialog;
   }

   : pattern {
      regex          \= $${__DIALOG}
      styles []       = .function;
   }

   : push {
      regex          \= $${__TRIGGERTYPE}
      styles []       = .function;
      context []      = trigger;
   }

   : inline_push {
      regex          \= (\?)
      styles []       = .control;
      : pop {
         regex       \= (:)
         styles []    = .control;
      }
      : include "logic" ;
   }

   : inline_push {
      regex          \= (^(\s)*\+)
      styles []       = .control;
      : eol_pop {}
      : inline_push {
         regex          \= (')
         styles []       = .punctuation;
         default_style   = .text
         : pop {
            regex       \= (')
            styles []    = .punctuation;
         }
      }
      : inline_push {
         regex          \= (\()
         styles []       = .punctuation;
         : pop {
            regex       \= (\))
            styles []    = .punctuation;
         }
         : pattern {
            regex       \= (,)
            styles []    = .punctuation;
         }
         : include "in_parens" ;
      }
      : inline_push {
         regex          \= (\?)
         styles []       = .control;
         : pop {
            regex       \= (:)
            styles []    = .control;
         }
         : include "logic" ;
      }
      : inline_push {
         regex          \= (\{)
         styles []       = .punctuation;
         : pop {  
            regex       \= (\})
            styles []    = .punctuation;
         }
         : include "main" ;
      }
   }
   
   : inline_push {
      regex          \= (\{)
      styles []       = .punctuation;
      : pop {  
         regex       \= (\})
         styles []    = .punctuation;
      }
      : include "main" ;
   }
   
   : inline_push {
      regex          \= (\")
      styles []       = .punctuation;
      default_style   = .text
      : pop {
         regex       \= (\")
         styles []    = .punctuation;
      }
   }
   
   : include "multi_line_comment" ;
   
   : pattern {
      regex          \= (//.*)
      styles []       = .comment;
   }
   
   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
   
}

#################################################
## End of Contexts
#################################################

logic_prefix : context {
   : inline_push {
      regex          \= (\?)
      styles []       = .control;
      : pop {
         regex       \= (:)
         styles []    = .control;
      }
      : include  "logic";
   }
}

logic : context {
   : inline_push {
      regex          \= $${__LOGIC}
      styles []       = .control;
      : pop {  
         regex       \= (\))
         styles []    = .punctuation;
      }
      : pattern {
         regex \= (\()
         styles []    = .punctuation;
      }
      : include "logic";
      : include "in_parens";
   }
}

trigger : context {
   : eol_pop {}
   : include "logic_prefix" ;
      : pattern {
      regex \= ([\w ]*,)
      styles [] = .parameter;
   }
   : pattern {
      regex \= (.*$)
      styles [] = .dialog;
   }
}

in_parens : context {
   : pattern {
      regex          \= (,)
      styles []       = .punctuation;
   }
   : inline_push {
      regex          \= (')
      styles []       = .punctuation;
      default_style   = .text
      : pop {
         regex       \= (')
         styles []    = .punctuation;
      }
   }
   :  pattern {
      regex          \= ([a-zA-Z\-_]([0-9])*)
      styles []       = .parameter;
   }
   :  pattern {
      regex          \= ([0-9])
      styles []       = .number;
   }
}

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}